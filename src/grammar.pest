//
// Since newlines are sometimes meaningful syntax, we need to specify what 
// whitespace is permitted where. 
//
// This might be easier in future versions of `pest`, though the addition of 
// this feature has not moved much since the middle of 2022:
// https://github.com/pest-parser/pest/issues/271
//

// whitespace helpers

    WS_NO_NL = _{ " " | "\\t" }
    WS = _{ WS_NO_NL | NEWLINE }
    CAPTURE_WS = { WS+ }
    eoi  = _{ !ANY }  // since EOI does not parse silently, define our own

// highlighting
//
// Syntax highlighting uses a parallel grammar (trying to reuse as much as 
// possible), that tries to be minimally recursive. In the future this might 
// shift to using something like a treesitter grammar, but for now this is 
// just a minimal product for building the infrastructure for highlighting
// into the repl
//

    hl = _{ CAPTURE_WS? ~ ( hl_kws  ~ CAPTURE_WS? )* ~ eoi }
        hl_kws = _{ hl_infix | hl_reserved | hl_control | hl_value | hl_call | hl_sym | hl_str | hl_ops | hl_brackets | hl_num | hl_other }
        hl_control = { "if" | "else" | "for" | "while" | "repeat" | "return" }
        hl_reserved = { "function" | "fn" }
        hl_value = { val_null | val_na | val_inf | val_true | val_false }
        hl_call = _{ hl_callname ~ CAPTURE_WS* ~ hl_open }
        hl_callname = { hl_sym | hl_str }
        hl_sym = { hl_symbol_backticked | symbol_ident }
        hl_symbol_backticked = ${ "`" ~ (!"`" ~ ANY)* ~ ( "`" | eoi ) }
        hl_str = ${ "\"" ~ double_quoted_string ~ ( "\"" | eoi ) | "'" ~ single_quoted_string ~ ( "'" | eoi ) }
        hl_num = { number ~ "L"? }
        hl_infix = { infix }
        hl_open = { "(" }
        hl_brackets = { hl_open | ")" | "[" | "]" | "{" | "}" }
        hl_ops = { "," | "+" | "-" | "*" | "/" | "<" | ">" | "=" | "&" | "!" | "^" | ":" | "::" | ":::" | "?" }
        hl_other = { ANY }


// repl line feed parsing

    repl = _{ WS* ~ expr ~ WS* ~ eoi | WS* ~ exprs ~ WS* ~ eoi }

// expression basics

    exprs = { expr ~ (WS_NO_NL* ~ ";" ~ WS* ~ expr)* ~ ";"? }
    expr = { atomic ~ WS* ~ ( infix ~ WS* ~ atomic ~ WS* )* }

        atomic = _{ prefixed }
            prefixed = { prefix* ~ postfixed }
            postfixed = { atom ~ postfix* }

        infix = _{ 
                assign | 
                add | subtract | multiply | divide | modulo | power | 
                pipe | 
                colon | doublecolon | triplecolon |
                gte | lte | gt | eq | neq | lt | 
                or | vor | and | vand | 
                special
            }

            // numerics
            add = { "+" }
            subtract = { "-" }
            multiply = { "*" }
            divide = { "/" }
            modulo = { "%%" }
            power = { "^" }

            // comparison
            gt = { ">" }
            gte = { ">=" }
            eq = { "==" }
            neq = { "!=" }
            lt = { "<" }
            lte = { "<=" }
            or = { "||" }
            vor = { "|" }
            and = { "&&" }
            vand = { "&" }

            // assignment
            assign = { "<-" }

            // special
            special = { "%" ~ !("%") ~ "%" }
            pipe = { "|>" }
            colon = { ":" }
            doublecolon = { "::" }
            triplecolon = { ":::" }

        prefix = _{ subtract | negate }
            negate = { "!" }

        postfix = _{ call | index | vector_index }
            call         = { "("  ~ pairs ~  ")" }
            index        = { "[[" ~ pairs ~ "]]" }
            vector_index = { "["  ~ pairs ~  "]" }           

        block  = { "{" ~ WS* ~ inline* ~ WS* ~ expr? ~ WS* ~ "}" }
            inline = _{ expr ~ WS_NO_NL* ~ inline_term ~ WS* } 
            inline_term = _{ ";" | NEWLINE | eoi }

        paren_expr = _{ "(" ~ WS* ~ expr ~ WS* ~ ")" }

        atom = _{ 
              block
            | paren_expr
            | kw_function
            | kw_break
            | kw_continue
            | kw_if_else
            | kw_for
            | kw_while
            | kw_repeat
            | val_null
            | val_na
            | val_inf
            | val_true
            | val_false
            | integer_expr
            | string_expr 
            | number 
            | symbol 
            | list
            | vec
        }

// keyworded (kw) syntax

    kw_function_or_fn = _{ "function" | "fn" }
    kw_function = { kw_function_or_fn ~ WS* ~ list ~ WS* ~ expr }
    kw_if_else = { "if" ~ WS* ~ "(" ~ WS* ~ expr ~ WS* ~ ")" ~ WS* ~ expr ~ WS* ~ ("else" ~ WS* ~ expr)? }
    kw_for = { "for" ~ WS* ~ "(" ~ WS* ~ symbol ~ WS+ ~ "in" ~ WS+ ~ expr ~ WS* ~ ")" ~ WS* ~ expr }
    kw_while = { "while" ~ WS* ~ "(" ~ WS* ~ expr ~ WS* ~ ")" ~ WS* ~ expr }
    kw_repeat = { "repeat" ~ WS* ~ expr }
    kw_break = { "break" }
    kw_continue = { "continue" }

// reserved value (val) types

    val_null = { "NULL" | "null" }
    val_na = { "NA" | "na" }
    val_inf = { "Inf" | "inf" }
    val_true = { "TRUE" | "true" }
    val_false = { "FALSE" | "false" }

// atomic value types

    number = @{
        "-"?
        ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
        ~ ("." ~ ASCII_DIGIT*)?
    }

    integer_expr = _{ integer ~ "L" }
        integer = @{ "-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

    string_expr = _{ "\"" ~ double_quoted_string ~ "\"" | "'" ~ single_quoted_string ~ "'" }
        single_quoted_string = @{ single_quoted_string_char* }
        double_quoted_string = @{ double_quoted_string_char* }
        single_quoted_string_char = _{ !("'"  | "\\") ~ ANY | escaped_char }
        double_quoted_string_char = _{ !("\"" | "\\") ~ ANY | escaped_char }
        escaped_char = _{
              "\\" ~ ("\"" | "'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
            | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
        }

    symbol = _{ symbol_with_backticks | symbol_ident }
        symbol_with_backticks = _{ "`" ~ symbol_backticked ~ "`" }
        symbol_backticked = ${ ( !"`" ~ ANY )* }
        symbol_ident = ${ ( ASCII_ALPHA | "." | "_" ) ~ ( ASCII_ALPHANUMERIC | "." | "_" )* }

    list = { "(" ~ pairs ~ ")" }
        pairs = _{ ( ( WS* ~ elem? ~ WS* ~ "," )* ~ WS* ~ elem? )? ~ WS* }
        ellipsis = { "..." }
        elem = _{ ellipsis | named | expr }
        named = { symbol ~ WS* ~ "=" ~ WS* ~ expr? }

    vec = { "[" ~ pairs ~ "]" }
